{
    "HIGHLIGHTSTROKECOLORS": {
        "converter": "#000000"
    }, 
    "ARGPLUGINS": {
        "from_ft": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\rswitch (unit) {\r    case 'mm':\r\t    block.value = (arg*1/0.0032808398950131);\r\t    break;\r    case 'cm':\r\t    block.value = (arg*1/0.032808398950131);\r\t    break;\r    case 'm':\r\t    block.value = (arg*1/3.2808398950131);\r\t    break;\r    case 'km':\r\t    block.value = (arg*1/3280.8398950131  );\r\t    break;\r    case 'in':\r\t    block.value = (arg*1/0.083333333333333);\r\t    break;\r    case 'ft':\r\t    block.value = (arg*1/1);\r\t    break;\r    case 'yd':\r\t    block.value = (arg*1/3);\r\t    break;\r    case 'mi':\r\t    block.value = (arg*1/5280);\r\t    break;\r    case 'nmi':\r\t    block.value = (arg*1/ 6076.1154855643);\r\t    break;\r}", 
        "from_km": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\rswitch (unit) {\r    case 'mm':\r\t    block.value = (arg*1/0.000001);\r\t    break;\r    case 'cm':\r\t    block.value = (arg*1/0.00001);\r\t    break;\r    case 'm':\r\t    block.value = (arg*1/0.001);\r\t    break;\r    case 'km':\r\t    block.value = (arg*1/1);\r\t    break;\r    case 'in':\r\t    block.value = (arg*1/0.0000254);\r\t    break;\r    case 'ft':\r\t    block.value = (arg*1/0.0003048);\r\t    break;\r    case 'yd':\r\t    block.value = (arg*1/0.0009144);\r\t    break;\r    case 'mi':\r\t    block.value = (arg*1/1.609344);\r\t    break;\r    case 'nmi':\r\t    block.value = (arg*1/1.852);\r\t    break;\r}", 
        "from_yd": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\rswitch (unit) {\r    case 'mm':\r\t    block.value = (arg*1/0.0010936132983377);\r\t    break;\r    case 'cm':\r\t    block.value = (arg*1/0.0.010936132983377);\r\t    break;\r    case 'm':\r\t    block.value = (arg*1/1.0936132983377);\r\t    break;\r    case 'km':\r\t    block.value = (arg*1/1093.6132983377);\r\t    break;\r    case 'in':\r\t    block.value = (arg*1/0.027777777777778);\r\t    break;\r    case 'ft':\r\t    block.value = (arg*1/0.33333333333333);\r\t    break;\r    case 'yd':\r\t    block.value = (arg*1/1);\r\t    break;\r    case 'mi':\r\t    block.value = (arg*1/1760);\r\t    break;\r    case 'nmi':\r\t    block.value = (arg*1/ 2025.3718285214);\r\t    break;\r}", 
        "from_cm": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\rswitch (unit){\r    case 'mm':\r    \tblock.value = (arg*1/0.1);\r    \tbreak;\r    case 'cm':\r\t    block.value = (arg);\r\t    break;\r    case 'm':\r\t    block.value = (arg*1/100);\r\t    break;\r    case 'km':\r\t    block.value = (arg*1/100000);\r\t    break;\r    case 'in':\r\t    block.value = (arg*1/2.54);\r\t    break;\r    case 'ft':\r\t    block.value = (arg*1/30.48);\r\t    break;\r    case 'yd':\r\t    block.value = (arg*1/91.44);\r\t    break;\r    case 'mi':\r\t    block.value = (arg*1/160934.4);\r\t    break;\r    case 'nmi':\r\t    block.value = (arg*1/185200);\r\t    break;\r}", 
        "from_in": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\rswitch (unit) {\r    case 'mm':\r\t    block.value = (arg*1/0.039370078740157);\r\t    break;\r    case 'cm':\r\t    block.value = (arg*1/0.39370078740157);\r\t    break;\r    case 'm':\r\t    block.value = (arg*1/39.370078740157);\r\t    break;\r    case 'km':\r\t    block.value = (arg*1/39370.078740157);\r\t    break;\r    case 'in':\r\t    block.value = (arg*1/1);\r\t    break;\r    case 'ft':\r\t    block.value = (arg*1/12);\r\t    break;\r    case 'yd':\r\t    block.value = (arg*1/36);\r\t    break;\r    case 'mi':\r\t    block.value = (arg*1/63360);\r\t    break;\r    case 'nmi':\r\t    block.value = (arg*1/72913.385826772);\r\t    break;\r}", 
        "from_m": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\rswitch (unit) {\r    case 'mm':\r\t    block.value = (arg*1/0.001);\r\t    break;\r    case 'cm':\r\t    block.value = (arg*1/0.01);\r\t    break;\r    case 'm':\r\t    block.value = (arg*1/1);\r\t    break;\r    case 'km':\r\t    block.value = (arg*1/1000);\r\t    break;\r    case 'in':\r\t    block.value = (arg*1/0.0254);\r\t    break;\r    case 'ft':\r\t    block.value = (arg*1/0.3048);\r\t    break;\r    case 'yd':\r\t    block.value = (arg*1/0.9144);\r\t    break;\r    case 'mi':\r\t    block.value = (arg*1/1609.344);\r\t    break;\r    case 'nmi':\r\t    block.value = (arg*1/1852);\r\t    break;\r}", 
        "from_mm": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\r\rswitch (unit) {\r\tcase 'mm':\r\t    block.value = (arg);\r\t    break;\r\tcase'cm':\r\t    block.value = (arg*1/10);\r\t    break;\r\tcase 'm':\r    \tblock.value = (arg*1/1000);\r    \tbreak;\r\tcase 'km':\r    \tblock.value = (arg*1/1000000);\r    \tbreak;\r    case 'in':\r    \tblock.value = (arg*1/25.4);\r    \tbreak;\r    case 'ft':\r    \tblock.value = (arg*1/304.8);\r    \tbreak;\r    case 'yd':\r    \tblock.value = (arg*1/914.4);\r    \tbreak;\r    case 'mi':\r    \tblock.value = (arg*1/1609344);\r    \tbreak;\r    case 'nmi':\r    \tblock.value = (arg*1/1852000);\r    \tbreak;\r}", 
        "from_nmi": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\rswitch (unit) {\r    case 'mm':\r\t    block.value = (arg*1/0.00000053995680345572);\r\t    break;\r    case 'cm':\r\t    block.value = (arg*1/0.0000053995680345572);\r\t    break;\r    case 'm':\r\t    block.value = (arg*1/0.00053995680345572);\r\t    break;\r    case 'km':\r\t    block.value = (arg*1/0.53995680345572);\r\t    break;\r    case 'in':\r\t    block.value = (arg*1/0.000013714902807775);\r\t    break;\r    case 'ft':\r\t    block.value = (arg*1/0.0001645788336933);\r\t    break;\r    case 'yd':\r\t    block.value = (arg*1/0.00049373650107991);\r\t    break;\r    case 'mi':\r\t    block.value = (arg*1/0.86897624190065);\r\t    break;\r    case 'nmi':\r\t    block.value = (arg*1/1);\r\t    break;\r}", 
        "from_mi": "var block = logo.blocks.blockList[blk];\rvar conns = block.connections;var arg = logo.parseArg(logo, turtle, conns[1]);\rvar unit = logo.parseArg(logo, turtle, conns[2]);\rswitch (unit) {\r    case 'mm':\r\t    block.value = (arg*1/0.00000062137119223733);\r\t    break;\r    case 'cm':\r\t    block.value = (arg*1/0.0000062137119223733);\r\t    break;\r    case 'm':\r\t    block.value = (arg*1/0.00062137119223733);\r\t    break;\r    case 'km':\r\t    block.value = (arg*1/0.62137119223733);\r\t    break;\r    case 'in':\r\t    block.value = (arg*1/0.000015782828282828);\r\t    break;\r    case 'ft':\r\t    block.value = (arg*1/0.00018939393939394);\r\t    break;\r    case 'yd':\r\t    block.value = (arg*1/0.00056818181818182);\r\t    break;\r    case 'mi':\r\t    block.value = (arg*1/1);\r\t    break;\r    case 'nmi':\r\t    block.value = (arg*1/1.1507794480235);\r\t    break;\r}"
    }, 
    "PALETTEHIGHLIGHTCOLORS": {
        "converter": "#FF9FFF"
    }, 
    "PALETTEPLUGINS": {
        "converter": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"55\" height=\"55\" viewBox=\"0 0 55 55\"><g transform=\"matrix(1.25 0 0 1.25-7.5-6.25)\"><g font-family=\"Sans\" word-spacing=\"0\" line-height=\"125%\" letter-spacing=\"0\" font-size=\"20\"><text x=\"10\" y=\"10\"><tspan x=\"20\" y=\"35\" fill=\"#fff\">len</tspan></text></g></g><g fill=\"#fff\" stroke=\"#fff\"><path d=\"m10.5 14.5h35\"/><path d=\"m15.5 44.5v-35\"/></g></svg>"
    }, 
    "BLOCKPLUGINS": {
        "from_ft": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_ft', 'from ft', 1000, 'ft');", 
        "from_km": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_km', 'from km', 1000, 'km');", 
        "from_yd": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_yd', 'from yd', 1000, 'yd');", 
        "from_cm": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_cm', 'from cm', 1000, 'cm');", 
        "from_in": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_in', 'from in', 1000, 'in');", 
        "from_m": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_m', 'from m', 1000, 'm');", 
        "from_mm": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_mm', 'from mm', 1000, 'mm');", 
        "from_nmi": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_nmi', 'from nmi', 1000, 'nmi');", 
        "from_mi": "var convertBlock = function (name, label, arg1, arg2) {\r    var protoblock = new ProtoBlock(name);\r    protoblock.palette = palettes.dict['converter'];\r    blocks.protoBlockDict[name] = protoblock;\r    protoblock.staticLabels.push(label, _('number'), _('unit to convert'));\r    protoblock.adjustWidthToLabel();\r    protoblock.twoArgMathBlock();\r    protoblock.dockTypes[2] = 'anyin';\r    protoblock.defaults.push(arg1);\r    protoblock.defaults.push(arg2);\r};convertBlock('from_mi', 'from mi', 1000, 'mi');"
    }, 
    "PALETTEFILLCOLORS": {
        "converter": "#ff00ff"
    }, 
    "PALETTESTROKECOLORS": {
        "converter": "#C700D3"
    }
}
